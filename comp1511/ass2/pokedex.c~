// Assignment 2 19T1 COMP1511: Pokedex
// pokedex.c
//
// This program was written by Yun Li (z5231701)
// on 23/04/2019
//
// Version 1.0.0: Assignment released.
// Version 1.0.1: Minor clarifications about `struct pokenode`.
// Version 1.1.0: Moved destroy_pokedex function to correct location.
// Version 1.1.1: Renamed "pokemon_id" to "id" in change_current_pokemon.

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

// Add any extra #includes your code needs here.
//
// But note you are not permitted to use functions from string.h
// so do not #include <string.h>

#include "pokedex.h"

// Add your own #defines here.

struct pokedex {
    struct pokenode *head;
};


// You don't have to use the provided struct pokenode, you are free to
// make your own struct instead.
// If you use the provided struct pokenode, you will need to add fields
// to it to store other information.

struct pokenode {
    struct pokenode *next;
    Pokemon         pokemon;
    //an identifier that equal to 1 when the pokemon is found 
    //othewise it will be 0.
    int found;
    //an identifier that equal to 1 when the pokemon is selected for now 
    //othewise it will be 0.
    int selected;
    //the integer that save the id of pokemon it can evolve;
    //it is -1 when there are no pokemon it can evolve into
    int evolution;
};


//Create a node that contain the input pokemon 
//but don't have an address to point yet 
//all sub value of structure are initialized
static struct pokenode *create_pokenode(Pokemon pokemon);

//input a string then print a same length string made by '*'
static void star(char *input);

//if first string is a sub string from second, then it return 1,
//otherwise returns 0. the function treat upper word same as lower word
static int is_included(char *small, char *big);


Pokedex new_pokedex(void) {
    Pokedex new_pokedex = malloc(sizeof (struct pokedex));
    assert(new_pokedex != NULL);
    new_pokedex->head = NULL;
    return new_pokedex;
}

////////////////////////////////////////////////////////////////////////
//                         Stage 1 Functions                          //
////////////////////////////////////////////////////////////////////////

void add_pokemon(Pokedex pokedex, Pokemon pokemon) {
    struct pokenode *this_node = create_pokenode(pokemon);
    if (pokedex->head == NULL) {
        pokedex->head = this_node;
        this_node->selected = 1;
    } else {
        struct pokenode *node = pokedex->head;
        struct pokenode *previous;
        while (node != NULL) {
            //exit the program after player added "id-existed" pokemon
            if (pokemon_id(node->pokemon) == 
            pokemon_id(this_node->pokemon)) {
                printf("There is already a pokemon with id %d!\n",
                pokemon_id(this_node->pokemon));
                exit(1);
            }
            previous = node;
            node = node->next;                     
        }    
        previous->next = this_node;      
    }
}

void detail_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    if (n != NULL) {
        //to make n become the node contain the current pokemon 
        while (n->selected != 1) {
            n = n->next;
        //there are two situations decided by whether pokemon is found;
        }if (n->found == 1) {
            //when id is bigger than 1000, 
            //there won't be any pointless "0" printed
            if (pokemon_id(n->pokemon) < 1000) {
                printf("Id: %003d\n",pokemon_id(n->pokemon));
            } else {
                printf("Id: %d\n",pokemon_id(n->pokemon));
            }
            printf("Name: %s\nHeight: %.1fm\nWeight: %.1fkg\n",
            pokemon_name(n->pokemon),pokemon_height(n->pokemon),
            pokemon_weight(n->pokemon));
            //printf one type when two type are same or second is NONE
            if (pokemon_second_type(n->pokemon) == NONE_TYPE ||
            pokemon_second_type(n->pokemon) == 
            pokemon_first_type(n->pokemon)) {
                printf("Type: %s\n", 
                pokemon_type_to_string(pokemon_first_type(n->pokemon)));
            } else {
                printf("Type: %s %s\n", 
                pokemon_type_to_string(pokemon_first_type(n->pokemon)),
                pokemon_type_to_string(pokemon_second_type(n->pokemon)));
            }
        } else {
            if (pokemon_id(n->pokemon) < 1000) {
                printf("Id: %003d\n",pokemon_id(n->pokemon));
            } else {
                printf("Id: %d\n",pokemon_id(n->pokemon));
            }
            printf("Name: ");
            star(pokemon_name(n->pokemon));
            printf("\nHeight: --\nWeight: --\nType: --\n");
        }
    }
}

Pokemon get_current_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //exist when there is no pokemon
    if (n == NULL) {
        fprintf(stderr, "You haven't added any pokemon yet.\n");
        exit(1);
    } else {
        while (n->selected != 1) {
            n = n->next;
        }
    }    
    return n->pokemon;
}

void find_current_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    if (n != NULL) {
        //to make n become the node contain the current pokemon
        while (n->selected != 1) {
            n = n->next;
        }
        n->found = 1;
    }
}

void print_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    while (n != NULL) {
        //there are four situations decided by whether pokemon is found 
        //and whether pokemon is selected 
        if (n->found == 0) {
            if (n->selected == 0) {
                printf("    ");
            } else {
                printf("--> ");
            }if (pokemon_id(n->pokemon) < 1000) {
                printf("#%003d: ",pokemon_id(n->pokemon));
            } else {
                printf("#%d: ",pokemon_id(n->pokemon));
            }
            star(pokemon_name(n->pokemon));
            printf("\n");
        } else {
            if (n->selected == 0) {
                printf("    ");
            } else {
                printf("--> ");
            }if (pokemon_id(n->pokemon) < 1000) {
                printf("#%003d: %s\n",
                pokemon_id(n->pokemon),pokemon_name(n->pokemon));
            } else {
                printf("#%d: %s\n",
                pokemon_id(n->pokemon),pokemon_name(n->pokemon));
            }
        }
        n = n->next;
    }
}

////////////////////////////////////////////////////////////////////////
//                         Stage 2 Functions                          //
////////////////////////////////////////////////////////////////////////

void next_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //n stands for node, for the looping purpose of function    
    if (n != NULL) {
        while (n->selected != 1) {
            n = n->next;
        //n->next != NULL means "n" is not the alst at this moment
        }if (n->next != NULL) {
            n->selected = 0;
            n->next->selected = 1;
        }
    }
}

void prev_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //n != NULL means there are at least one pokemon
    if (n != NULL) {
    //n->next != NULL means there are at least two pokemon
    //which means if there is only one pokemon, function does nothing
    //and when first pokemon is selected, function also does nothing
        if (n->next != NULL && n->selected != 1) {
            while (n->next->selected != 1) {
                n = n->next;
            }
            n->next->selected = 0;
            n->selected = 1;
        }
    }
}

void change_current_pokemon(Pokedex pokedex, int id) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //m stands for node, for the looping purpose of function
    struct pokenode *m = pokedex->head;
    //if m isn't NULL after looping, m will be the node contain given id    
    while (m != NULL && id != pokemon_id(m->pokemon)) {
        m = m->next;
    }
    //if there's at least one node and there's available node with "id"
    if (n != NULL && m != NULL) {
    //make n become currently selected pokenode
        while (m != NULL&& n->selected != 1 && n != NULL) {
            n = n->next;
        }
        //make n become un selected and make m become selected
        n->selected = 0;
        m->selected = 1;
    }
}

void remove_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //when there is pokemon
    if (n !=NULL) {
    //when there is only one pokenode
        if (n->next == NULL) {
            pokedex->head = NULL;
            destroy_pokemon(n->pokemon);
            free(n);            
        } else {
    //when there is more than one pokenode
    //if first node is the current node
            if (n->selected == 1) {
                n->next->selected = 1;
                pokedex->head = n->next;
                destroy_pokemon(n->pokemon);
                free(n);
            } else {
            //if first node is not the current node
                while (n->next->selected != 1) {
                    n = n->next;
                }
                //now n->next is the current node instead of n
                struct pokenode *tmp = n->next;
                //if n->next is the last one
                if (n->next->next == NULL) {
                    n->selected = 1;
                    destroy_pokemon(tmp->pokemon);
                    free(tmp);
                    n->next = NULL;
                } else {
                //if n->next is not the last one
                    n->next->next->selected = 1;
                    n->next = n->next->next;
                    destroy_pokemon(tmp->pokemon);
                    free(tmp);
                } 
            }             
        }
    }
}

void destroy_pokedex(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //free the node from the first one to the last one
    while (n != NULL) {
        struct pokenode *tmp = n;
        n = n->next;
        destroy_pokemon(tmp->pokemon);
        free(tmp);
    }
    free(pokedex);
}

////////////////////////////////////////////////////////////////////////
//                         Stage 3 Functions                          //
////////////////////////////////////////////////////////////////////////

void go_exploring(Pokedex pokedex, int seed, int factor, int how_many) {
    srand(seed); 
    int found_factor, excutable, next_turn, counter;
    //n stands for node, for the looping purpose of function    
    struct pokenode *n = pokedex->head; 
    excutable = 0; 
    //to chech if factor big enough or there is any pokenode in the pokedex
    while (n != NULL) {
        if (pokemon_id(n->pokemon) <= factor-1) {
            excutable++;
        }
        n = n->next;     
    }
    if (excutable == 0) {
        printf("There aren't any Pokemon to find with pokemon_id");
        printf(" between 0 and (%d - 1)!",factor);
        exit(1);
    }
    //redefine n as the head  
    n = pokedex->head;
    //make found factor be between 0 and factor - 1
    found_factor = rand() % (factor-1);
    //count the number of pokemon that have been met
    counter = 0; 
    while (counter < how_many) {
        next_turn  = 0;      
        while (next_turn == 0) {
            if (pokemon_id(n->pokemon) == found_factor) {
                //whatever n is found or not, n->found 
                //should be 1 after the meeting
                n->found = 1;
                //only way to get out the loop is next_turn = 1;
                next_turn = 1;
                found_factor = rand() % (factor-1);
            }
            n = n->next;
            //when it's the end of loop, which means there's have no 
            //matching pokemon, 
            //so a new found factor should be generated 
            //and the loop should start again from the beginning
            if (n == NULL) {
                found_factor = rand() % (factor-1);
                n = pokedex->head;
            }
        }
        counter++;
    }  
}

int count_found_pokemon(Pokedex pokedex) {
    int found_counter = 0;
    struct pokenode *n = pokedex->head;
    //n stands for node, for the looping purpose of function    
    while (n != NULL) {
        if (n->found == 1) {
            found_counter++;
        }
        n = n->next;     
    }
    return found_counter;
}

int count_total_pokemon(Pokedex pokedex) {
    int total_counter = 0;
    //n stands for node, for the looping purpose of function    
    struct pokenode *n = pokedex->head;
    while (n != NULL) {
        total_counter++;
        n = n->next;     
    }
    return total_counter;
}

////////////////////////////////////////////////////////////////////////
//                         Stage 4 Functions                          //
////////////////////////////////////////////////////////////////////////

void add_pokemon_evolution(Pokedex pokedex, int from_id, int to_id) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //m stands for node, for the looping purpose of function    
    struct pokenode *m = pokedex->head;
    //find the pokenode with from_id
    while (n != NULL && from_id != pokemon_id(n->pokemon)) {
        n = n->next;     
    } 
    //find the pokenode with to_id    
    while (m != NULL && to_id != pokemon_id(m->pokemon)) {
        m = m->next;     
    }
    if (m == NULL || n == NULL) {
        printf("id provided are not exist in the list.\n");
        exit(1);
    } else if (from_id == to_id) {
        printf("A pokemon can not evolve into itself.\n");
        exit(1);    
    } else {
        n->evolution = to_id;
    }
}

void show_evolutions(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    int i = 0;
    if (n != NULL) {
    //make n become the current one
        while (n->selected != 1) {
            n = n->next;
        }
        
        while (i == 0) {
            if (n->found == 0) {
                printf("#%003d ???? [????]", pokemon_id(n->pokemon));
            } else {
                printf("#%003d %s ",pokemon_id(n->pokemon),
                pokemon_name(n->pokemon));
                //to decide to print one type or two type
                if (pokemon_second_type(n->pokemon) == NONE_TYPE ||
                pokemon_second_type(n->pokemon) == 
                pokemon_first_type(n->pokemon)) {
                    printf("[%s]", 
                    pokemon_type_to_string(pokemon_first_type(n->pokemon)));
                } else {
                    printf("[%s %s]", 
                    pokemon_type_to_string(pokemon_first_type(n->pokemon)),
                    pokemon_type_to_string(pokemon_second_type(n->pokemon)));
                }    
            }
            //if n->evolution is not -1, 
            //which means the revolution is not ended
            if (n->evolution != -1) {
                printf(" --> ");
                struct pokenode *after_ev = pokedex->head;
                while (pokemon_id(after_ev->pokemon) != n->evolution) {
                    after_ev = after_ev->next;
                }//make after_ev become the new "n" 
                //which will be print in next loop
                n = after_ev;  
            //only way to get out loop is when evolution number is "-1"     
            } else {
                i = 1;
            }     
        }
        printf("\n");
    }   
}

int get_next_evolution(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    int id = 0;
    if (n == NULL) {
        printf("The pokedex is empty!\n");
        exit(1);
    } else { 
    //make n become the current one   
        while (n->selected != 1) {
            n = n->next;
        }
        //equal to -1 means there is no more evolution
        if (n->evolution == -1) {
            id = DOES_NOT_EVOLVE;
        } else {
            id = n->evolution;
        }
    }
    return id;
}

////////////////////////////////////////////////////////////////////////
//                         Stage 5 Functions                          //
////////////////////////////////////////////////////////////////////////

Pokedex get_pokemon_of_type(Pokedex pokedex, pokemon_type type) {
    //make a new pokedex
    struct pokedex *sp_dex = new_pokedex();
    //n stands for node, for the looping purpose of function    
    struct pokenode *n = pokedex->head;
    //according to description in the pokedex.h, three types are wrong
    while (n != NULL) {
        if (type == NONE_TYPE && type == INVALID_TYPE && 
        type == MAX_TYPE) {
            printf("The type input is not valid");
            exit(1);
        }//n must have at least one same type with given type
        //n also need to be found already 
        if ((pokemon_first_type(n->pokemon) == type ||
        pokemon_second_type(n->pokemon) == type) && n->found == 1) {
            //it's wrong to use exist pointer, so it's necessary to \
            //create a new pokeon
            Pokemon right_pokemon = clone_pokemon(n->pokemon);
            //add_pokemon will automatically set first pokemon 
            //as the selected one
            add_pokemon(sp_dex, right_pokemon);
        }
        n = n->next;
    }
    //because all the pokemon added by add_pokemon function 
    //is defined as unfound, it should be changed as found
    n = sp_dex->head;
    while (n != NULL) {
        n->found = 1;
        n = n->next;     
    }
    return sp_dex;
}

Pokedex get_found_pokemon(Pokedex pokedex) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //make a new pokedex    
    struct pokedex *foundex = new_pokedex();
    while (n != NULL) {
    //only the found pokemon will be in the new pokedex
        if (n->found == 1) {
            //make a new pokenode        
            Pokemon right_pokemon = clone_pokemon(n->pokemon);
            struct pokenode *new_node = create_pokenode(right_pokemon);
            new_node->pokemon = right_pokemon;
            new_node->found = 1;
            if (foundex->head == NULL) {
            //when there is no pokemon in the new pokedex yet
                foundex->head = new_node;  
            } else {
            //c=make a "last node" which will be useful later
                struct pokenode *last = foundex->head;
                while (last->next != NULL) {
                    last = last->next;
                }
                //when added node is the smallest
                if (pokemon_id(n->pokemon) < 
                pokemon_id(foundex->head->pokemon)) {
                    struct pokenode *tmp = foundex->head;
                    new_node->next = tmp;
                    foundex->head = new_node;
                    //when added node is the biggest
                } else if (pokemon_id(n->pokemon) > 
                pokemon_id(last->pokemon)) {
                    last->next = new_node;
                    //when added node is in between 
                    //which means there must be at least two pokemon
                } else {
                    // because there are at least two, 
                    //pre won't be equal to now
                    struct pokenode *now = foundex->head;
                    struct pokenode *pre;
                    //keep looping until there is an pokemon id 
                    //bigger than that of "n"
                    while (pokemon_id(n->pokemon) > 
                    pokemon_id(now->pokemon)) {
                        pre = now;
                        now = now->next;
                    }
                    pre->next = new_node;
                    new_node->next = now;
                }
            }
        }
        n = n->next;
    }
    // to make the first node be the selected one
    if (foundex->head != NULL) {
        foundex->head->selected = 1;
    }
    //because all the pokemon added by add_pokemon function 
    //is defined as unfound, it should be changed as found
    n = foundex->head;
    while (n != NULL) {
        n->found = 1;
        n = n->next;     
    }
    return foundex;
}

Pokedex search_pokemon(Pokedex pokedex, char *text) {
    //n stands for node, for the looping purpose of function
    struct pokenode *n = pokedex->head;
    //make a new pokedex    
    struct pokedex *rightdex = new_pokedex();
    while (n != NULL) {
    //the is_included function will be expalin later
        if (is_included(text, pokemon_name(n->pokemon)) == 1 
        && n->found == 1) {
        //it's necessary to copy a pokemon in the new address
            Pokemon right_pokemon = clone_pokemon(n->pokemon);
            //add_pokemon will automatically set first pokemon 
            //as the selected one
            add_pokemon(rightdex, right_pokemon);            
        }
        n = n->next;
    }
    //because all the pokemon added by add_pokemon function 
    //is defined as unfound, it should be changed as found
    n = rightdex->head;
    while (n != NULL) {
        n->found = 1;
        n = n->next;     
    }
    return rightdex;
}

// Add definitions for your own functions below.

static struct pokenode *create_pokenode(Pokemon pokemon) {
    struct pokenode *n;
    n = malloc(sizeof(struct pokenode)); 
    if (n == NULL) {
        fprintf(stderr, "not enough memory\n");
        exit(1);
    } else {
        n->pokemon = pokemon;
        //for the convienience, we initialize n->next as NULL
        n->next = NULL;
        //assume every new pokenode is unfound
        n->found = 0;
        //assume every new pokenode is unselected
        n->selected = 0;
        //assume every new pokenode don't have a evolution
        n->evolution = -1;
    }
    return n;
};

static void star(char *input) {
    int i = 0;
    while (input[i] != '\0') {
        printf("*");
        i++;
    }
}

static int is_included(char *small, char *big) {
    //a is for the looping purpose of small string
    //b is for the looping purpose of big string 
    int bcounter = 0, smleng = 0, bigleng = 0;
    int acounter, i, counter;
    //find out length of biglength
    while (big[bigleng] != '\0') {
        bigleng++;
    //find out length of small length
    }while (small[smleng] != '\0') {
        smleng++;
        //if small string will be included in big string,
        //then the length of it must be smaller at first
        if (smleng > bigleng) {
            return 0;
        }
    }    
    while (bcounter <= bigleng) {
        acounter = 0;
        i = 0;
        counter = 0;
        //to avoid the condition that there are two consective character
        while(bcounter + 1 <= bigleng && 
        big[bcounter] == big[bcounter + 1]){
            bcounter++;
        }
        while (i == 0 && acounter <= smleng && bcounter <= bigleng) {
            //the difference between upper letter 
            //and lower letter should be ignored during searching    
            if (small[acounter] == big[bcounter] || 
            (small[acounter] - big[bcounter]) == 'A' - 'a' ||
            small[acounter] - big[bcounter] == 'a' - 'A') {
            //once first letter of small string is corresponded as 
            //given letter of big string,
            //counter will increase
            //loop will countinue
                acounter++;
                bcounter++;
                counter++;
            //once whole small string is included, function returns 1    
                if (smleng == counter) {
                    return 1;
                }
            //whatever how many right letter is correct before,
            //if there is one letter wrong, breaker will become 1
            //this loop will break then a and counter become 0     
            } else {
                i = 1;
            }
        }
        counter = 0;
        bcounter++;
    }
    return 0;
}
