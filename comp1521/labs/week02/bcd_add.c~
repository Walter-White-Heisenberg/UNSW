#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>

//
// Store an arbitray length Binary Coded Decimal number.
// bcd points to an array of size n_bcd
// Each array element contains 1 decimal digit.
// Digits are stored in reverse order.
//
// For example if 42 is stored then
// n_bcd == 2
// bcd[0] == 0x02
// bcd[1] == 0x04
//

typedef struct big_bcd {
    unsigned char *bcd;
    int n_bcd;
} big_bcd_t;

big_bcd_t *bcd_add(big_bcd_t *x, big_bcd_t *y);
void bcd_print(big_bcd_t *number);
void bcd_free(big_bcd_t *number);
big_bcd_t *bcd_from_string(char *string);

int main(int argc, char *argv[]) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <number> <number>\n", argv[0]);
        exit(1);
    }

    big_bcd_t *left = bcd_from_string(argv[1]);
    big_bcd_t *right = bcd_from_string(argv[2]);

    big_bcd_t *result = bcd_add(left, right);

    bcd_print(result);
    printf("\n");

    bcd_free(left);
    bcd_free(right);
    bcd_free(result);

    return 0;
}


// DO NOT CHANGE THE CODE ABOVE HERE
/*
  shorter
 |-------s------|
 [0]         [s-1]
               [s](last one 
  00000000000000N

  longer
 |-------b-----------|
 [0]              [b-1]
                    [b]
  0000000000000000000N(last one
  
  sum
 [0]                [b]
                    [b+1]
 |-------sum----------|
  00000000000000000000N
 */ 
 
big_bcd_t *bcd_add(big_bcd_t *x, big_bcd_t *y) {
    big_bcd_t *pointer = malloc(sizeof(*pointer));
    int b = (x->n_bcd >= y->n_bcd)? x->n_bcd: y->n_bcd;
    int s = x->n_bcd + y->n_bcd - b;
    unsigned char *longer = (x->n_bcd == b)? x->bcd: y->bcd;//longer string
    unsigned char *shorter = (x->bcd == longer)? y->bcd: x->bcd;//shorter string
    unsigned char *sum = malloc(sizeof(char)*(b+1));
    for(int i = 0;i <= b ; i++){
            sum[i] = 0;
    }
    int i = 0, d = 0, nd = 0;
    while(i < b){
        if(i < s)
            d = (shorter[i] % '0') + (longer[i] % '0');
        else
            d = longer[i] + nd;    
        sum[i] = sum[i] + (d % 10)  + nd;
        nd = (d > 9); 
        if(i + 1 == b  && nd == 1){
            sum[b] = 1 ;//this integer 1 will become char '1' in the final loop
            sum = realloc(sum, sizeof(char) * (b+2));
            b++;
            break;
        }
        i++;
    }
    sum[b] = 0;
    pointer->n_bcd = b;
    pointer->bcd = sum;
    return pointer;
}

// DO NOT CHANGE THE CODE BELOW HERE


// print a big_bcd_t number
void bcd_print(big_bcd_t *number) {
    // if you get an error here your bcd_add is returning an invalid big_bcd_t
    assert(number->n_bcd > 0);
    for (int i = number->n_bcd - 1; i >= 0; i--) {
        putchar(number->bcd[i] + '0');
    }
}

// free storage for big_bcd_t number
void bcd_free(big_bcd_t *number) {
    // if you get an error here your bcd_add is returning an invalid big_bcd_t
    // or it is calling free for the numbers it is given
    free(number->bcd);
    free(number);
}

// convert a string to a big_bcd_t number
big_bcd_t *bcd_from_string(char *string) {
    big_bcd_t *number = malloc(sizeof *number);
    assert(number);

    int n_digits = strlen(string);
    assert(n_digits);
    number->n_bcd = n_digits;

    number->bcd = malloc(n_digits * sizeof number->bcd[0]);
    assert(number->bcd);

    for (int i = 0; i < n_digits; i++) {
        int digit = string[n_digits - i - 1];
        assert(isdigit(digit));
        number->bcd[i] = digit - '0';
    }
    return number;
}
